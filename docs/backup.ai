=== prompts for GROK.com
Write some python code. Use functions if code gets larger than 20 lines.
problem statement = I want to backup a given folder that contains sources. 
Idea is to be able to back up entire folder (including ignored like .git and invisible_starts_with_dot files)
OR all visible_non_ignored files 
OR just the files that have uncomitted changes.
provide placeholders for locating files. I will do that manually 
also write some unit tests with pytest
provide a wrapper for shell command executions (where I can copy paste a command), handle error conditions and timeouts
add requirements.txt if any libraries are needed. I will use pip later
further provide a README.md that I can paste into existing version 
all these files will be written into a zip whose name should be constructed like so:
dirname__parentdirname__timestamp.zip for today, substitute dirname = foldername (no path)
parentdirname = foldername of the parent directory (no path)
timestamp = 2digit for years, 3 letters for current month in english + 2 digits for zero-padded today's date. 
__ = separator
So today = 21 April 2025, timestamp = 25apr21
use argparse for CLI options
please ask any followup questions if needed


>>> miscellaneous questions asking for community preferences and questions about code not-captured


==== for resize_image
Given PIL, cv2 libraries ONLY, new libraries requires justification
please write some python code to resize a jpeg image.
Code should use typed parameters, write as a reusable function.
It should take width and height as parameters. Must use argparse. Use functions if code gets larger than 20 lines. Add basic documentation. Parameters should be in --width, -w style.  Do not use any new libraries except cv2 and PIL. Add parameter for specifying the max file size, compress if required. max-size code to accomodate 2k or 4m and such. to represent 2 kilo bytes and 4 megabytes allow for upper and lower case multiples.
Write output file with the a timestamp of 2 digit years, 3 letters lowercase name in english + 2 padded digits for today's date.  add 2digit zero padded minute and seconds to filename upon conflict. 
add some code to compare image quality metrics.
add complete unit tests with pytest, we should achieve very high code-coverage
